name: Build Godot GDExtension

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build:
    strategy:
      fail-fast: false  # Don't cancel other builds if one fails
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
          - os: windows-latest
            platform: windows
            arch: x86_64
          - os: windows-latest
            platform: windows
            arch: arm64
          - os: macos-13  # Intel-based runner for x86_64
            platform: macos
            arch: x86_64
          - os: macos-latest  # ARM64-based runner for arm64
            platform: macos
            arch: arm64
        target: [template_release]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install SCons
        run: pip install scons

      - name: Setup build environment
        shell: bash
        run: |
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            # Windows setup
            echo "Setting up Windows build environment"
            # GitHub Actions Windows runners should handle ARM64 cross-compilation
          elif [[ "${{ matrix.platform }}" == "linux" ]]; then
            # Linux setup
            sudo apt-get update
            sudo apt-get install -y build-essential
          elif [[ "${{ matrix.platform }}" == "macos" ]]; then
            # macOS setup
            echo "macOS build environment ready"
          fi

      - name: Clone godot-cpp
        run: |
          git clone --recursive https://github.com/godotengine/godot-cpp.git
          cd godot-cpp
          echo "Building godot-cpp for ${{ matrix.platform }} ${{ matrix.arch }}..."
          scons platform=${{ matrix.platform }} generate_bindings=yes target=${{ matrix.target }} arch=${{ matrix.arch }} -j2
          echo "Listing built libraries:"
          ls -la bin/
          cd ..

      - name: Build GDExtension
        run: |
          echo "Building GDExtension for ${{ matrix.platform }} ${{ matrix.arch }}..."
          scons platform=${{ matrix.platform }} target=${{ matrix.target }} arch=${{ matrix.arch }} -j2
          echo "Listing built files:"
          ls -la bin/
      
      - name: Verify build output
        shell: bash
        run: |
          echo "Verifying build output exists..."
          echo "Contents of bin directory:"
          ls -la bin/ || echo "bin directory doesn't exist"
          
          # Find the actual library that was built
          if [[ "${{ matrix.platform }}" == "linux" ]]; then
            expected="bin/wfc.release.${{ matrix.arch }}.so"
            if [[ -f "$expected" ]]; then
              echo "✅ Linux library found: $expected"
            else
              echo "❌ Linux library not found: $expected"
              echo "Available files:"
              find bin/ -name "*.so" 2>/dev/null || echo "No .so files found"
              exit 1
            fi
          elif [[ "${{ matrix.platform }}" == "windows" ]]; then
            expected="bin/wfc.release.${{ matrix.arch }}.dll"
            if [[ -f "$expected" ]]; then
              echo "✅ Windows library found: $expected"
            else
              echo "❌ Windows library not found: $expected"
              echo "Available files:"
              find bin/ -name "*.dll" 2>/dev/null || echo "No .dll files found"
              exit 1
            fi
          elif [[ "${{ matrix.platform }}" == "macos" ]]; then
            expected="bin/wfc.release.${{ matrix.arch }}.dylib"
            if [[ -f "$expected" ]]; then
              echo "✅ macOS library found: $expected"
            else
              echo "❌ macOS library not found: $expected"
              echo "Available files:"
              find bin/ -name "*.dylib" 2>/dev/null || echo "No .dylib files found"
              # Check if any dylib was built (might be wrong arch)
              if ls bin/*.dylib 1> /dev/null 2>&1; then
                echo "But found these dylib files:"
                ls -la bin/*.dylib
                echo "This suggests an architecture mismatch in the build"
              fi
              exit 1
            fi
          fi
          echo "Build output verified successfully!"
      
      - name: Upload built library
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            bin/**/*.so
            bin/**/*.dll
            bin/**/*.dylib