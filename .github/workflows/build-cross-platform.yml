name: 🚀 Cross-Platform GDExtension Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  SCONS_CACHE: ${{ github.workspace }}/.scons-cache/

jobs:
  # Cross-platform builds using modern toolchains
  cross-builds:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows (x86_64, MinGW) - Release
            os: ubuntu-latest
            platform: windows
            arch: x86_64
            target: template_release
            artifact_ext: dll
            flags: "use_mingw=yes generate_template_get_node=no"
          - name: Windows (arm64, MSVC) - Release
            os: windows-latest
            platform: windows
            arch: arm64
            target: template_release
            artifact_ext: dll
            flags: "generate_template_get_node=no"
          - name: Linux (x86_64) - Release
            os: ubuntu-latest
            platform: linux
            arch: x86_64
            target: template_release
            artifact_ext: so
            flags: "generate_template_get_node=no"
          - name: macOS (x86_64) - Release
            os: macos-13
            platform: macos
            arch: x86_64
            target: template_release
            artifact_ext: dylib
            flags: "generate_template_get_node=no"
          - name: macOS (arm64) - Release
            os: macos-latest
            platform: macos
            arch: arm64
            target: template_release
            artifact_ext: dylib
            flags: "generate_template_get_node=no"
          - name: Web (wasm32) - Release
            os: ubuntu-latest
            platform: web
            arch: wasm32
            target: template_release
            artifact_ext: wasm
            flags: "generate_template_get_node=no"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: System info
        shell: bash
        run: |
          echo "=== System Information ==="
          echo "Runner OS: ${{ runner.os }}"
          echo "Matrix OS: ${{ matrix.os }}"
          echo "Platform: ${{ matrix.platform }}"
          echo "Architecture: ${{ matrix.arch }}"
          echo "System: $(uname -a)"
          echo "PWD: $(pwd)"
          echo "=========================="

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install SCons
        run: |
          pip install scons>=4.0
          scons --version

      - name: Install cross-compilation tools
        shell: bash
        run: |
          echo "Running on: ${{ matrix.os }}"
          echo "Platform: ${{ matrix.platform }}"
          echo "Architecture: ${{ matrix.arch }}"
          echo "Current OS: $(uname -a)"
          
          case "${{ matrix.os }}" in
            "ubuntu-latest")
              sudo apt-get update
              case "${{ matrix.platform }}" in
                "windows")
                  # For Windows x86_64 from Ubuntu
                  sudo apt-get install -y gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64
                  ;;
                "linux")
                  sudo apt-get install -y build-essential
                  ;;
                "web")
                  # Install Emscripten
                  git clone https://github.com/emscripten-core/emsdk.git
                  cd emsdk
                  ./emsdk install latest
                  ./emsdk activate latest
                  source ./emsdk_env.sh
                  cd ..
                  ;;
              esac
              ;;
            "windows-latest")
              # Windows native build - no additional tools needed
              echo "Using native Windows tools for ${{ matrix.platform }} ${{ matrix.arch }}"
              ;;
            "macos-"*)
              # macOS native build - no additional tools needed
              echo "Using native macOS tools for ${{ matrix.platform }} ${{ matrix.arch }}"
              # Install Xcode command line tools if needed
              xcode-select --install 2>/dev/null || echo "Xcode tools already installed"
              ;;
          esac

      - name: Setup Emscripten (Web only)
        if: matrix.platform == 'web'
        shell: bash
        run: |
          source ./emsdk/emsdk_env.sh
          echo "EMSDK=$(pwd)/emsdk" >> $GITHUB_ENV
          echo "$(pwd)/emsdk" >> $GITHUB_PATH
          echo "$(pwd)/emsdk/upstream/emscripten" >> $GITHUB_PATH

      - name: Setup godot-cpp
        id: setup-godot-cpp
        shell: bash
        run: |
          # Clone godot-cpp if not already present
          if [[ ! -d "godot-cpp" ]]; then
            echo "Cloning godot-cpp..."
            # Pin to godot-4.3-stable for better Windows ARM64 MSVC compatibility
            git clone --recursive --depth 1 -b godot-4.3-stable https://github.com/godotengine/godot-cpp.git
            cd godot-cpp
            # Ensure submodules are properly initialized
            git submodule update --init --recursive
          else
            echo "godot-cpp already exists"
            cd godot-cpp
            # Update submodules if they exist but aren't initialized
            git submodule update --init --recursive
          fi
          
          # Verify SConstruct file exists
          if [[ ! -f "SConstruct" ]]; then
            echo "ERROR: SConstruct not found in godot-cpp!"
            ls -la
            exit 1
          fi
          
          # Get the commit hash for cache key
          hash=$(git rev-parse HEAD)
          echo "hash=${hash}" >> $GITHUB_OUTPUT
          echo "Godot-cpp commit: ${hash}"

      - name: Cache godot-cpp build  
        uses: actions/cache@v4
        id: godot-cpp-cache
        with:
          path: |
            godot-cpp/bin
            godot-cpp/gen
          key: godot-cpp-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.target }}-flags-${{ matrix.flags }}-${{ steps.setup-godot-cpp.outputs.hash }}
          restore-keys: |
            godot-cpp-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.target }}-flags-${{ matrix.flags }}-
            godot-cpp-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.target }}-

      - name: Build godot-cpp
        if: steps.godot-cpp-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          # Setup environment for Web builds
          if [[ "${{ matrix.platform }}" == "web" ]]; then
            source ./emsdk/emsdk_env.sh
          fi
          
          cd godot-cpp
          echo "Building godot-cpp for ${{ matrix.platform }} ${{ matrix.arch }}..."
          # Use optimized build flags for faster compilation
          scons platform=${{ matrix.platform }} target=${{ matrix.target }} arch=${{ matrix.arch }} \
            optimize=speed \
            debug_symbols=no \
            -j4 ${{ matrix.flags }}
          echo "Built godot-cpp libraries:"
          ls -la bin/ || echo "No bin directory yet"

      - name: Show godot-cpp cache status and verify headers
        shell: bash
        run: |
          cd godot-cpp
          if [[ "${{ steps.godot-cpp-cache.outputs.cache-hit }}" == "true" ]]; then
            echo "✅ Using cached godot-cpp libraries for ${{ matrix.platform }} ${{ matrix.arch }}"
          else
            echo "🔨 Built fresh godot-cpp libraries for ${{ matrix.platform }} ${{ matrix.arch }}"
          fi
          echo "Available libraries:"
          ls -la bin/ 2>/dev/null || echo "No libraries found"
          echo "Generated headers:"
          ls -la gen/include/godot_cpp/classes/ 2>/dev/null | head -10 || echo "No generated class headers found"
          
          # Check for the specific header our extension needs
          if [[ -f "gen/include/godot_cpp/classes/ref_counted.hpp" ]]; then
            echo "✅ RefCounted header found"
          else
            echo "❌ RefCounted header missing - need to rebuild with bindings"
          fi

      - name: Build WFC GDExtension
        shell: bash
        run: |
          # Setup environment for Web builds
          if [[ "${{ matrix.platform }}" == "web" ]]; then
            source ./emsdk/emsdk_env.sh
          fi
          
          mkdir -p bin
          echo "Building WFC GDExtension for ${{ matrix.platform }} ${{ matrix.arch }}..."
          echo "Working directory: $(pwd)"
          echo "godot-cpp status:"
          ls -la godot-cpp/bin/ 2>/dev/null || echo "No godot-cpp libraries found"
          
          # Build the extension
          scons platform=${{ matrix.platform }} target=${{ matrix.target }} arch=${{ matrix.arch }} \
            optimize=speed \
            debug_symbols=no \
            -j4 ${{ matrix.flags }}
          
          echo "Build complete. Generated files:"
          ls -la bin/

      - name: Verify build output
        shell: bash
        run: |
          expected="bin/wfc.release.${{ matrix.arch }}.${{ matrix.artifact_ext }}"
          echo "Looking for: $expected"
          
          if [[ -f "$expected" ]]; then
            echo "✅ ${{ matrix.platform }} library found: $expected"
            echo "File size: $(stat -c%s "$expected" 2>/dev/null || stat -f%z "$expected") bytes"
            
            # Additional verification for Windows DLLs
            if [[ "${{ matrix.platform }}" == "windows" ]]; then
              echo "Verifying Windows DLL..."
              file "$expected" 2>/dev/null || echo "file command not available"
            fi
          else
            echo "❌ ${{ matrix.platform }} library not found: $expected"
            echo "Available files in bin/:"
            find bin/ -name "*.${{ matrix.artifact_ext }}" 2>/dev/null || echo "No .${{ matrix.artifact_ext }} files found"
            echo "All files in bin/:"
            ls -la bin/ 2>/dev/null || echo "bin directory not found"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi

      - name: Upload built library
        uses: actions/upload-artifact@v4
        with:
          name: wfc-${{ matrix.platform }}-${{ matrix.arch }}
          path: bin/*.${{ matrix.artifact_ext }}
          if-no-files-found: error

  # Collect all artifacts and create a release-ready package
  package-release:
    needs: [cross-builds]
    runs-on: ubuntu-latest
    name: 📦 Package Release
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Package release
        run: |
          mkdir -p release/bin
          
          # Copy all built libraries to release directory
          find artifacts/ -name "*.dll" -exec cp {} release/bin/ \;
          find artifacts/ -name "*.so" -exec cp {} release/bin/ \;
          find artifacts/ -name "*.dylib" -exec cp {} release/bin/ \;
          find artifacts/ -name "*.wasm" -exec cp {} release/bin/ \;
          
          # Copy extension configuration and other files
          cp wfc.gdextension release/
          cp README.md release/ 2>/dev/null || echo "README.md not found"
          cp LICENSE release/ 2>/dev/null || echo "LICENSE not found"
          
          echo "Release package contents:"
          find release/ -type f | sort
          
          # Create archive
          tar -czf wfc-gdextension-cross-platform.tar.gz -C release .
          
          echo "📦 Release package created: wfc-gdextension-cross-platform.tar.gz"
          echo "Package size: $(stat -c%s wfc-gdextension-cross-platform.tar.gz) bytes"

      - name: Upload release package
        uses: actions/upload-artifact@v4
        with:
          name: wfc-gdextension-release
          path: |
            wfc-gdextension-cross-platform.tar.gz
            release/
          if-no-files-found: error

      - name: Display build summary
        run: |
          echo "## 🎉 Cross-Platform Build Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Built Libraries:" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Architecture | File |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------------|------|" >> $GITHUB_STEP_SUMMARY
          
          for file in release/bin/*; do
            if [[ -f "$file" ]]; then
              filename=$(basename "$file")
              case "$filename" in
                *.dll) platform="Windows" ;;
                *.so) platform="Linux" ;;
                *.dylib) platform="macOS" ;;
                *.wasm) platform="Web" ;;
                *) platform="Unknown" ;;
              esac
              
              if [[ "$filename" =~ x86_64 ]]; then
                arch="x86_64"
              elif [[ "$filename" =~ arm64 ]]; then
                arch="arm64"
              elif [[ "$filename" =~ wasm32 ]]; then
                arch="wasm32"
              else
                arch="Unknown"
              fi
              
              size=$(stat -c%s "$file")
              echo "| $platform | $arch | \`$filename\` (${size} bytes) |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 Download:" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Package**: \`wfc-gdextension-release\` artifact" >> $GITHUB_STEP_SUMMARY
          echo "- **Individual Builds**: Individual platform artifacts" >> $GITHUB_STEP_SUMMARY
